[pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Configure asyncio mode for running async tests
asyncio_mode = auto

#loop scope
asyncio_default_fixture_loop_scope = function

# Verbose output and other options
addopts = 
    -v                      # Verbose output
    --tb=short              # Shorter traceback format
    --strict-markers        # Treat unknown markers as errors
    --durations=10          # Show 10 slowest test durations

# Test markers for categorizing tests
markers =
    unit: Unit tests that test individual components in isolation
    integration: Integration tests that test component interaction
    api: Tests specifically for API endpoints
    ui: Tests for UI components
    database: Tests for database operations
    simulation: Tests for simulation functionality
    config: Tests for configuration settings
    e2e: End-to-end tests requiring a running application
    browser: Tests that require a browser environment
    security: Tests for security vulnerabilities
    docker: Tests for Docker deployment

# Configure console output
console_output_style = progress

# Configure log collection
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configure JUnit XML output for CI integration
# Uncomment to enable
# junit_family = xunit2
# junit_suite_name = "Control Viewer Tests"

# Configure coverage settings
# Uncomment to configure coverage
# [coverage:run]
# source = app
# omit = 
#     */test_*.py
#     */conftest.py
#     */__init__.py
#     */venv/*

# Configure doctest
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Temporary file handling
tmp_path_retention_count = 5
tmp_path_retention_policy = all